# -*- coding: utf-8 -*-
"""Dyn calc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18HyEa8r2rPC4ZiDmVsea5p16j6zQj7cx
"""

#@title #Dynamic Calculator {display-mode: "form"}

import time
import random
from google.colab import files
passcode = "test" #If you need to lock this so with a password you set the password here! 
saved = 0


def kinetic(m, v):
  return m/2*v*v
def kineticinput(): #Gets input for kinetic energy solver
  m = int(input("Mass in kg: "))
  v = int(input("Velocity in mps: "))
  return kinetic(m, v)

def dst(distance, speed, time):
  if distance == 0:
    print("The distance travelled is", (time/60)*speed, "km")
  elif time == 0:
    print("The time passed is", distance/speed, "hours")
  elif speed == 0:
    print("The speed is", (distance/time)/60, "Km per hour")

def whatistime():
  return int(input("How long did it take to get to the end?\nPlease write this amount of minutes only\n"))

def whatisspeed():
  return int(input("How fast was it going\nJust write the speed in kph without writing kph\n"))

def whatisdistance():
  return int(input("How far did it travel?\nWrite this in km but only use numbers\n"))

def dstinput():
  check = input("What variable dont you have?\n1. Distance\n2. Speed\n3. Time\n")
  if "1" in check:
    return dst(0, whatisspeed(), whatistime())
  elif "2" in check:
    return dst(whatisdistance(), 0, whatistime())
  elif "3" in check:
    return dst(whatisdistance(), whatisspeed(), 0) 
   
def pattern(start, increase): 
  realstart =  int(start) - int(increase)
  print(str(increase) + "n +", str(realstart))  
  n = int(input("n = "))
  answer = int(increase)*int(n)+int(realstart)
  print(str(answer))

def patterninput(): #Gets input for geometric pattern solver
  pattern(input("How many things in starting pattern?\n"), input("How many were added in the second pattern?\n"))

def averageinput():
  numbers = input("Write the numbers you want the average of with a space in between them\n")
  numbers = numbers.split()
  return average(numbers)

def average(numberlist):
  average = 0
  for i in range(0, len(numberlist)):
    i += 1
    average += int(numberlist[i-1])
  return average/len(numberlist)

def sigmainput():
  last = int(input("Whats on the top?\n"))
  bottom = int(input("Whats on the bottom?\n"))
  formula = int(input("What is the formula?\n"))
  return sigma(last, formula, bottom)

def sigma(last_num, formula, n):
  answer = 0
  for n in range(last_num+1):
    print(n)
    answer += formula + n
  return answer



def algebra(variable, operator, number, answer):
  divby = 1
  if variable.isalpha() == False:
    new = '' 
    for letter in variable:
	    if not(letter.isalpha()):
		    new += letter
    variable = new
    if int(variable) > 1:
      divby = int(variable)
  if operator == "-":
    return (number + answer) / divby
  elif operator == "+":
    return (answer - number) / divby
  elif operator == "*":
    return (answer / number) / divby
  elif operator == "/":
    return (answer * number) / divby

def algebrainput(): #Gets input for algebra
  test = input("Input the equation in the format of: x (+ or - or * or /) number = answer \n")
  test = test.split()
  if len(test) < 5:
    print("Invalid syntax please try again")
    interface()
  else:
    print("x =", algebra(test[0], test[1], int(test[2]), int(test[4])))



def prime(n):
  prime = True
  for i in range(0, n-1):
    i += 1
    if i > 1:
      if n % i == 0:
        prime = False
  return prime

def primegen(n): #      
  for i in range(0, n):
    i += 1
    if i % 2 != 0:
      if prime(i) == True:
        print(i)

def getinput(check, operator):
  global saved
  global savedanswer
  if saved == 1 and check == 1:
    saved = 0
    return savedanswer
  elif check == 1:
    print("What is the first number you want to", operator)
    return int(input())
  elif check == 2:
    print("What is the second number you want to", operator)
    return int(input())

def add(first, second):
  return first + second

def subtract(first, second):
  return first - second

def div(first, second):
  return first / second

def mult(first, second):
  return first * second

def factorial(n): #Function that takes the factorial of a variable
  if n == 0:
    return 1  
  else:
    return n * factorial(n-1)

def reuse(answer):
  global saved
  global savedanswer
  choice = input("Do you want to reuse the answer that you just got Y/N?\n")
  if choice.lower() == "y":
    saved = 1
    savedanswer = answer
    calc()
  elif choice.lower() == "n":
    return False

def calc():
  print("What operator do you want to use?")
  time.sleep(0.5)
  operator = input("Your choices are * for multiplication, - for subtraction, + for addition, ! for the factorial and / for division\n")
  if "*" in operator:
    answer = mult(getinput(1, "multiply"), getinput(2, "multiply"))
    print("The answer is", answer)
    reuse(answer)
  elif "+" in operator:
    answer = add(getinput(1, "add"), getinput(2, "add"))
    print("The answer is", answer)
    reuse(answer)
  elif "-" in operator:
    answer = subtract(getinput(1, "subtract"), getinput(2, "subtract"))
    print("The answer is", answer)
    reuse(answer)
  elif "/" in operator:
    answer = div(getinput(1, "divide"), getinput(2, "divide"))
    print("The answer is", answer)
  elif "!" in operator:
    answer = factorial(int(input("What number do you want the factorial of?\n")))
    print(answer)
    reuse(answer)

def randomnumber(end):
  return random.randint(1, end)
def randomnumberinput():
  return randomnumber(input("To which number should we randomise?\n"))

def clockcalc(hour, minutes):
  if hour > 12:
    hour = hour - 12
  degreeminutes = minutes * 6
  degreehour = hour * 30
  fixedhour = degreehour + (0.5 * minutes)
  if degreeminutes > fixedhour:
    return degreeminutes - fixedhour
  elif degreeminutes < fixedhour:
    return fixedhour - degreeminutes

def clockinput():
  clock = input("Write the time in a digital format like 18:30\n").split(":")
  return clockcalc(int(clock[0]), int(clock[1]))


def randomlist():
  randlist = input("Write the items in the list with a space between each item\n")
  randlist = randlist.split()
  answer = randlist[random.randint(0, (len(randlist)-1))]
  print()
  return answer


def interface():
  chosenfunc = input("1. Algebra \n2. Geometric pattern solver \n3. Prime generator \n4. Kinetic energy \n5. Normal calculator\n6. Random number generator\n7. Random item from list\n8. Distance time and speed calculator\n9. Average of a set of numbers\n10. Clock calculator\n")
  if "10" in chosenfunc:
    return clockinput()
  #elif "11" in chosenfunc: broken
  #  return sigmainput() 
  elif "1" in chosenfunc:
    return algebrainput() 
  elif "2" in chosenfunc:
    return patterninput()
  elif "3" in chosenfunc:
    return primegen(input("Up to what number do you want primes?\n"))
  elif "4" in chosenfunc:
    print(kineticinput())
  elif "5" in chosenfunc:
    return calc()
  elif "6" in chosenfunc:
    return randomnumberinput()
  elif "7" in chosenfunc:
    print('"' + randomlist() + '" is your answer')
  elif "8" in chosenfunc:
    print(dstinput())
  elif "9" in chosenfunc:
    print(averageinput())
  else:
    print("Invalid syntax please try again")
    print()
    interface()


def error_handeling():
  try:
    return interface()
  except ValueError:
    print("That was not a number! Please dont try to break me :(")
    return error_handeling()
  

def codecheck():
  global code
  if passcode.lower() == "none": #Allows you to disable needing a password 
    return error_handeling()
  try:
    if code:
      print("You have already written the code this session!")
      print("Have a nice day!!!")
      return error_handeling()
  except NameError:
      send = input("Please enter your code for this session: ")
      if send in passcode:
        print("Code confirmed have a nice day!")
        code = True
        return error_handeling()
      else:
        print("You don't have the code!")
        print("You can only use the normal calculator right now :D")
        return calc()




codecheck()